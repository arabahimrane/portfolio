#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * Redirect HTTP server to HTTPS.
 */

http
  .createServer((req, res) => {
    res.writeHead('301', { Location: `https://${req.headers.host}${req.url}` });
    res.end();
  })
  .listen(80); // Assurez-vous que le serveur HTTP écoute sur le port 80

/**
 * Create HTTPS server.
 */
const keyPath = '/etc/letsencrypt/live/www.imranearabah.com/privkey.pem';
const certPath =  '/etc/letsencrypt/live/www.imranearabah.com/fullchain.pem';

let server;

try {
  const key = fs.readFileSync(keyPath, 'utf8');
  const cert = fs.readFileSync(certPath, 'utf8');

  console.log('Key:', key);
  console.log('Cert:', cert);

  server = https.createServer(
    {
      key: key,
      cert: cert,
    },
    app
  );

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
} catch (error) {
  console.error('Error reading SSL files:', error);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Le serveur est en cours d'exécution sur l'adresse https://${addr.address === '::' ? 'localhost' : addr.address}:${addr.port}`);
}
