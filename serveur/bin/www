#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
 
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * redirect HTTP server to Https.
 */

http
  .createServer((req, res) => {
    res.writeHead('301', { Location: `https://${req.headers.host}${req.url}` });
    res.end();
  })

/**
 * Create HTTPS server.
 */
const server = https.createServer(
  {
    key: fs.readFileSync(path.join(__dirname, '../ssl/local.key')),
    cert: fs.readFileSync(path.join(__dirname, '../ssl/local.cert')),
  },
  app
);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  console.log(`Le serveur est en cours d'ex√©cution sur l'adresse http://${addr.address}:${addr.port}`);
}
